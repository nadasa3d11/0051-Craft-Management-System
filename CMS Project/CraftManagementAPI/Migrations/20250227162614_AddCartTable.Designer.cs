// <auto-generated />
using System;
using CraftManagementAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CraftManagementAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250227162614_AddCartTable")]
    partial class AddCartTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CraftManagementAPI.Models.Category", b =>
                {
                    b.Property<int>("Cat_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Cat_ID"));

                    b.Property<string>("Cat_Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Cat_ID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("CraftManagementAPI.Models.DeleteProduct", b =>
                {
                    b.Property<string>("SSN")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Product_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Delete_Date")
                        .HasColumnType("datetime2");

                    b.HasKey("SSN", "Product_ID");

                    b.HasIndex("Product_ID");

                    b.ToTable("DeleteProducts");
                });

            modelBuilder.Entity("CraftManagementAPI.Models.Order", b =>
                {
                    b.Property<int>("Order_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Order_ID"));

                    b.Property<DateTime?>("Arrived_Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Order_Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Order_Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Order_Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Payment_Method")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Payment_Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Receive_Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("User_SSN")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Order_ID");

                    b.HasIndex("User_SSN");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CraftManagementAPI.Models.OrderItem", b =>
                {
                    b.Property<int>("Product_ID")
                        .HasColumnType("int");

                    b.Property<int>("Order_ID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Total_Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Product_ID", "Order_ID");

                    b.HasIndex("Order_ID");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("CraftManagementAPI.Models.Product", b =>
                {
                    b.Property<int>("Product_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Product_ID"));

                    b.Property<DateTime>("Add_Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Cat_ID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("Rating_Average")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("User_SSN")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Product_ID");

                    b.HasIndex("Cat_ID");

                    b.HasIndex("User_SSN");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("CraftManagementAPI.Models.ProductImage", b =>
                {
                    b.Property<int>("Product_ID")
                        .HasColumnType("int");

                    b.Property<string>("Images")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Product_ID", "Images");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("CraftManagementAPI.Models.ProductRate", b =>
                {
                    b.Property<string>("SSN_Client")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Product_ID")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Product_Rate")
                        .HasColumnType("int");

                    b.HasKey("SSN_Client", "Product_ID");

                    b.HasIndex("Product_ID");

                    b.ToTable("ProductRates");
                });

            modelBuilder.Entity("CraftManagementAPI.Models.User", b =>
                {
                    b.Property<string>("SSN")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("Birth_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Full_Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<double>("Rating_Average")
                        .HasColumnType("float");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SSN_Image")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SSN");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CraftManagementAPI.Models.UserRate", b =>
                {
                    b.Property<string>("SSN_Client")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SSN_Artisan")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Artisan_Rate")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SSN_Client", "SSN_Artisan");

                    b.HasIndex("SSN_Artisan");

                    b.ToTable("UserRates");
                });

            modelBuilder.Entity("CraftManagementAPI.Models.DeleteProduct", b =>
                {
                    b.HasOne("CraftManagementAPI.Models.Product", "Product")
                        .WithMany("DeletedProducts")
                        .HasForeignKey("Product_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CraftManagementAPI.Models.User", "User")
                        .WithMany("DeletedProducts")
                        .HasForeignKey("SSN")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CraftManagementAPI.Models.Order", b =>
                {
                    b.HasOne("CraftManagementAPI.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("User_SSN")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("CraftManagementAPI.Models.OrderItem", b =>
                {
                    b.HasOne("CraftManagementAPI.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("Order_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CraftManagementAPI.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("Product_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CraftManagementAPI.Models.Product", b =>
                {
                    b.HasOne("CraftManagementAPI.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("Cat_ID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CraftManagementAPI.Models.User", "User")
                        .WithMany("Products")
                        .HasForeignKey("User_SSN")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CraftManagementAPI.Models.ProductImage", b =>
                {
                    b.HasOne("CraftManagementAPI.Models.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("Product_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CraftManagementAPI.Models.ProductRate", b =>
                {
                    b.HasOne("CraftManagementAPI.Models.Product", "Product")
                        .WithMany("ProductRates")
                        .HasForeignKey("Product_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CraftManagementAPI.Models.User", "Client")
                        .WithMany("ProductRates")
                        .HasForeignKey("SSN_Client")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CraftManagementAPI.Models.UserRate", b =>
                {
                    b.HasOne("CraftManagementAPI.Models.User", "Artisan")
                        .WithMany("ArtisanRates")
                        .HasForeignKey("SSN_Artisan")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CraftManagementAPI.Models.User", "Client")
                        .WithMany("ClientRates")
                        .HasForeignKey("SSN_Client")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Artisan");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("CraftManagementAPI.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("CraftManagementAPI.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("CraftManagementAPI.Models.Product", b =>
                {
                    b.Navigation("DeletedProducts");

                    b.Navigation("OrderItems");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductRates");
                });

            modelBuilder.Entity("CraftManagementAPI.Models.User", b =>
                {
                    b.Navigation("ArtisanRates");

                    b.Navigation("ClientRates");

                    b.Navigation("DeletedProducts");

                    b.Navigation("Orders");

                    b.Navigation("ProductRates");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
